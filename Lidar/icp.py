def icp(a, b,
        max_time = 1
    ):
    import cv2
    import numpy
    import copy
    import pylab
    import time
    import sys
    import sklearn.neighbors
    import scipy.optimize



    def res(p,src,dst):
        T = numpy.matrix([[numpy.cos(p[2]),-numpy.sin(p[2]),p[0]],
        [numpy.sin(p[2]), numpy.cos(p[2]),p[1]],
        [0 ,0 ,1 ]])
        n = numpy.size(src,0)
        xt = numpy.ones([n,3])
        xt[:,:-1] = src
        xt = (xt*T.T).A
        d = numpy.zeros(numpy.shape(src))
        d[:,0] = xt[:,0]-dst[:,0]
        d[:,1] = xt[:,1]-dst[:,1]
        r = numpy.sum(numpy.square(d[:,0])+numpy.square(d[:,1]))
        return r

    def jac(p,src,dst):
        T = numpy.matrix([[numpy.cos(p[2]),-numpy.sin(p[2]),p[0]],
        [numpy.sin(p[2]), numpy.cos(p[2]),p[1]],
        [0 ,0 ,1 ]])
        n = numpy.size(src,0)
        xt = numpy.ones([n,3])
        xt[:,:-1] = src
        xt = (xt*T.T).A
        d = numpy.zeros(numpy.shape(src))
        d[:,0] = xt[:,0]-dst[:,0]
        d[:,1] = xt[:,1]-dst[:,1]
        dUdth_R = numpy.matrix([[-numpy.sin(p[2]),-numpy.cos(p[2])],
                            [ numpy.cos(p[2]),-numpy.sin(p[2])]])
        dUdth = (src*dUdth_R.T).A
        g = numpy.array([  numpy.sum(2*d[:,0]),
                        numpy.sum(2*d[:,1]),
                        numpy.sum(2*(d[:,0]*dUdth[:,0]+d[:,1]*dUdth[:,1])) ])
        return g
    def hess(p,src,dst):
        n = numpy.size(src,0)
        T = numpy.matrix([[numpy.cos(p[2]),-numpy.sin(p[2]),p[0]],
        [numpy.sin(p[2]), numpy.cos(p[2]),p[1]],
        [0 ,0 ,1 ]])
        n = numpy.size(src,0)
        xt = numpy.ones([n,3])
        xt[:,:-1] = src
        xt = (xt*T.T).A
        d = numpy.zeros(numpy.shape(src))
        d[:,0] = xt[:,0]-dst[:,0]
        d[:,1] = xt[:,1]-dst[:,1]
        dUdth_R = numpy.matrix([[-numpy.sin(p[2]),-numpy.cos(p[2])],[numpy.cos(p[2]),-numpy.sin(p[2])]])
        dUdth = (src*dUdth_R.T).A
        H = numpy.zeros([3,3])
        H[0,0] = n*2
        H[0,2] = numpy.sum(2*dUdth[:,0])
        H[1,1] = n*2
        H[1,2] = numpy.sum(2*dUdth[:,1])
        H[2,0] = H[0,2]
        H[2,1] = H[1,2]
        d2Ud2th_R = numpy.matrix([[-numpy.cos(p[2]), numpy.sin(p[2])],[-numpy.sin(p[2]),-numpy.cos(p[2])]])
        d2Ud2th = (src*d2Ud2th_R.T).A
        H[2,2] = numpy.sum(2*(numpy.square(dUdth[:,0])+numpy.square(dUdth[:,1]) + d[:,0]*d2Ud2th[:,0]+d[:,0]*d2Ud2th[:,0]))
        return H
    t0 = time.time()
    init_pose = (0,0,0)
    src = numpy.array([a.T], copy=True).astype(numpy.float32)
    dst = numpy.array([b.T], copy=True).astype(numpy.float32)
    Tr = numpy.array([[numpy.cos(init_pose[2]),-numpy.sin(init_pose[2]),init_pose[0]],
                   [numpy.sin(init_pose[2]), numpy.cos(init_pose[2]),init_pose[1]],
                   [0,                    0,                   1          ]])
    print("src",numpy.shape(src))
    print("Tr[0:2]",numpy.shape(Tr[0:2]))
    src = cv2.transform(src, Tr[0:2])
    p_opt = numpy.array(init_pose)
    T_opt = numpy.array([])
    error_max = sys.maxsize
    first = False
    while not(first and time.time() - t0 > max_time):
        distances, indices = sklearn.neighbors.NearestNeighbors(n_neighbors=1, algorithm='auto',p = 3).fit(dst[0]).kneighbors(src[0])
        print("distances: " + str(distances.shape))
        print("indices: " + str(indices.shape))
        p = scipy.optimize.minimize(res,[0,0,0],args=(src[0],dst[0, indices.T][0]),method='Newton-CG',jac=jac,hess=hess).x
        T  = numpy.array([[numpy.cos(p[2]),-numpy.sin(p[2]),p[0]],[numpy.sin(p[2]), numpy.cos(p[2]),p[1]]])
        p_opt[:2]  = (p_opt[:2]*numpy.matrix(T[:2,:2]).T).A
        p_opt[0] += p[0]
        p_opt[1] += p[1]
        p_opt[2] += p[2]
        src = cv2.transform(src, T)
        Tr = (numpy.matrix(numpy.vstack((T,[0,0,1])))*numpy.matrix(Tr)).A
        error = res([0,0,0],src[0],dst[0, indices.T][0])

        if error < error_max:
            error_max = error
            first = True
            T_opt = Tr

    p_opt[2] = p_opt[2] % (2*numpy.pi)
    return T_opt, error_max


if __name__ == '__main__':
    import cv2
    import numpy
    import random
    import matplotlib.pyplot
    n1 = 100
    n2 = 75
    bruit = 1/10
    center = [random.random()*(2-1)*3,random.random()*(2-1)*3]
    radius = random.random()
    deformation = 2

    template = numpy.array([[866.7357657652565, 895.0009720568406, 1825.416846713168, 1824.3485106884748, 1822.2891514843254, 1829.3141042302955, 1824.5480336570633, 1931.3593972400804, 1940.147530537675, 1937.8419477061857, 1949.395013845815, 1943.9109707348343, 1945.6650671139064, 1956.557779762012, 1951.2467920124489, 1846.2662112005526, 1856.0272803251323, 1852.021682685988, 1858.435648320095, 1861.7277319846064, 1860.0905988446139, 1862.1495799165018, -412.82031707055495, -1195.644864002235, -1332.3961023843085, -1354.3557491871304, -1359.9052165063858, -1363.939370505756, -1361.7377129150648, -1369.8394467561118, -1368.6090741556463, -1365.1653017084654, -1371.3288942656511, -1369.3024177985722, -1369.78819365487, -1369.133434963753, -1372.141415409213, -1358.1442614386594, -1357.5510955933614, -1296.879550234726, -1294.0255990363023, -1297.9605348057783, -1296.4201801548538, -1294.6814769382117, -1293.6076549714946, -1296.5471790303357, -1293.8336006025113, -1294.5032601507578, -1296.7453847056659, -1285.9501047449876, -1294.3621279313675, -1291.7640338184524, -1293.8981856399234, -1349.2777888130436, -1363.670898549552, -1360.5448980932097, -1362.6100928430865, -341.08521246081796, -325.54115624998445, -308.61288439114486, -303.5180014310588, -296.92783742983727, -295.1819222985479, -293.43683775141295, -290.97958967160446, -295.7332221584085, -326.70003795886436, -1151.2530324690224, -1118.2546942559427, -1127.6017416623492, -1124.844548104876, -1103.5327320797398, -1106.8997837344577, -1053.1807388778243, -965.5356427684575, -876.8942136699701, -798.7023080631533, -715.8623044614851, -639.8933749592086, -597.9800508401291, -523.1444898221147, -444.2742248592655, -426.74137445426624, -261.9013726026638, -99.25847011453374, 67.30053727331435, 230.91785638142636, 397.7546252527223, 736.3519440218595, 867.3158792452233, 873.1129863028449, 876.888031547671, 873.9710200329769, 875.2678784887252, 872.2790492315182, 874.1594636188843, 873.1246684584235, 865.4820677845319, 867.0320857012596, 865.1746985354866, 866.0127620139457, 864.7481623977634, 862.9610179297053, 861.2650985469136, 862.5583469418738, 851.3881288312477, 853.9588181482859, 861.8990602890598, 860.551772367452, 860.2254678624072, 860.6321573685332, 859.3589848760366, 861.6488867006344, 862.8739842437066, 864.432673785326, 865.4969974073144, 867.023355911706], [-116.27279279055138, -84.70100363815298, 17.423711882212547, 88.6270926339344, 159.4296424211537, 234.23913115470748, 304.301717672023, 399.52589552172105, 481.48578353733524, 563.1097457070844, 648.7135962757949, 732.2415587473536, 820.2558726474551, 916.9090559879679, 1009.6756690448308, 1147.3840420186941, 1256.3296928708212, 1363.4022698238996, 1482.4083457512872, 1606.8230812567556, 1735.5111535481085, 1880.521521285198, 4935.515368055677, 3166.2712469378043, 3150.8668055554335, 2871.6450868176184, 2607.143657744759, 2381.873623029644, 2171.322039962025, 2000.1319837977967, 1836.966184947024, 1686.7790901630347, 1560.2642808999205, 1437.4381555778268, 1327.8517865423566, 1224.01220878893, 1131.1060952089335, 1031.5882972975403, 948.362284600808, 758.689450422882, 688.9511949613988, 626.4982143523623, 560.7592767732483, 501.0368606929941, 442.6644299005178, 386.7485133112716, 328.9674968016459, 275.5241540392774, 222.8216096893544, 168.94178910605805, 118.22328145074553, 66.9920214135978, 16.232227133517405, -35.7002957380414, -87.88589448289, -142.62391199423024, -196.81030811965925, -96.5977631239909, -108.03682514505522, -118.27230270768327, -130.7940090650019, -139.3479793870013, -153.04862870386663, -166.22991532949462, -181.60362990464887, -198.18643069545752, -255.10259739500216, -1123.3381971743327, -1179.0383533942174, -1281.547233698406, -1382.1174850926159, -1468.599506069856, -1599.311685935112, -1657.1489315256974, -1661.8739189672908, -1659.0083749131963, -1663.9914920439323, -1659.9702477909332, -1658.8611963281658, -1745.935310599232, -1746.846327748597, -1733.4735830481234, -4180.777206373103, -4188.319462628041, -4182.822462896378, -4182.458563773552, -4187.638110391609, -4178.611911638847, -4196.131060516965, -2861.9667041405437, -2513.4168527423635, -2227.891479095975, -1981.8503112350636, -1784.6725759606006, -1610.7257130783498, -1476.6520348970319, -1348.5160597224522, -1226.0470434870804, -1129.3004139131995, -1037.9543841200489, -958.120110439697, -883.8228700535484, -813.5688548203691, -749.92428286126, -692.6630931563353, -626.4082168085175, -576.3413913704125, -533.68443145068, -488.42696186352873, -443.34208794214726, -399.8915974400868, -360.0835980891491, -320.28387181929304, -283.4899465861033, -245.06815887085799, -209.53567113721533, -173.69099804999445]])
    print('template: ' + str(template.shape))
    data = numpy.array([[2334.8348841635084, 2424.475471731309, 2530.6009294843416, 2631.882149331602, 3460.5901825310716, 1592.5725200733725, 1478.8656494329853, 1252.1308027913803, 1047.317567076418, 874.2712131417943, 720.9752953000955, 587.277868334608, 463.04197582793745, 357.2077729959662, 256.0062477106799, 168.73877242452878, 85.82424338225685, 6.935212558960139, -62.25839532615893, -292.77515701839565, -343.56400047326326, -393.41684270446177, -438.66819816792554, -484.6870156631028, -527.4298037516127, -572.610273643673, -612.3265303433683, -654.3005635107268, -695.4547804787301, -734.0980592901891, -772.5746887616875, -809.6320112700804, -850.7858478459507, -934.6438150866375, -976.5934664846221, -1018.9263269306422, -1616.5306484072594, -1584.3682041335494, -1648.1459493620132, -1740.9764471381948, -1783.3771215330644, -1887.370026207847, -1955.1534932702998, -1887.512219762779, -1827.9916093038887, -1772.883436977086, -1654.714528089611, -1608.43358567064, -3526.3897531534526, -3420.48508692624, -3317.879969055108, -3209.1792950479535, -3090.2004795579483, -3000.66706021354, -2891.8246723896614, -2776.596615204061, -2664.451793487313, -2548.501756563965, -2097.9534245429504, -1701.3201997064634, -1401.2402604824492, -1163.7474603262963, -966.094611224219, -806.2170176291598, -671.9044361923554, -558.138890616558, -458.5687921679925, -368.51959796019685, -288.6462311250233, -217.78219694898092, -155.7488438024625, -97.82272195922168, -45.39429616055497, 1.586817412200545, 47.44416637502167, 90.6033384797726, 129.96904216267347, 168.33658698593467, 204.0865619625854, 237.33089072051288, 270.4651614801556, 300.3622784344871, 332.48236176641495, 362.0133361607736, 389.71246836329885, 417.72261574324955, 444.6648496079156, 470.8191939642515, 498.09775077467805, 539.4975418367559, 1244.5786867010152, 1297.5358456962956, 1353.2746860139082, 1403.1263683794184, 1472.920827348883, 1604.7716347326264, 1666.3770775458572, 1737.4674949125515, 1802.0926923539046, 1865.9904132814893, 1939.3891757612594, 2005.7332569023956, 2085.2896463324514, 2054.000949155639, 2121.421298282572, 2207.0275474638506, 2290.5055477159744], [-429.44390051923676, -347.4827326260211, -263.1862424082729, -168.17822251905346, 3577.6838650961836, 2999.1383480605136, 3074.5722390971973, 2894.8030075811744, 2721.6979950378645, 2570.9123080866793, 2446.2153801468385, 2333.7409786358808, 2211.0344024056612, 2131.0192794555524, 2043.5266210972388, 1972.0440637015856, 1894.5570588525072, 1816.4867609830692, 1755.3962920695178, 1461.4626089752874, 1420.8014780675053, 1377.6776656302638, 1337.6585044083956, 1296.3543099197823, 1256.8161369566096, 1224.4776588479342, 1185.7261362716317, 1149.8781555406404, 1116.3445753033789, 1081.9687099664102, 1046.4601821305873, 1008.7805788806425, 977.639729708775, 991.3864982539835, 957.6039179742057, 924.0072457982299, 163.22139951613573, 95.60311831018647, 34.164010326487215, -30.863781525732076, -101.2674917850829, -180.6941730443731, -266.62779347424225, -334.9427118869534, -400.02904746352993, -462.62769198602314, -729.1693171199514, -786.6585348718263, -2243.855024584773, -2374.2569011409005, -2504.460323291801, -2629.314514229045, -2744.5127064999765, -2886.6609181283193, -3010.9612462897007, -3122.8933377458397, -3246.643904123494, -3368.57756282832, -3020.668219276739, -2675.3653634729517, -2416.354960452433, -2207.535299510315, -2032.587378727794, -1892.150808731995, -1770.5460996893114, -1668.1013095077044, -1582.9146100941732, -1502.4654092255353, -1420.7246094008929, -1355.8711137833402, -1303.7297640439892, -1251.6832526915462, -1205.6457223729067, -1163.7489181565327, -1121.7471255042196, -1083.2174458788595, -1046.711808751252, -1016.1509698277746, -982.5278241486558, -947.4780265577708, -921.3732462609892, -892.830611982835, -868.2687035786945, -843.8776018723016, -817.6229292908711, -792.3861929618773, -770.6673951992324, -749.3692591739085, -727.2832190235155, -724.1211240891249, -1350.805113667244, -1301.0791594415764, -1253.6946146067462, -1203.0230491800166, -1165.0700564180172, -1166.603617497209, -1114.0950073623562, -1064.7214502499244, -1007.2845566991759, -950.7696040795463, -892.147514394376, -829.5205555956454, -767.3663342228922, -664.2903456830719, -595.805274559639, -526.6786541485238, -453.6621384712912]])
    print('data: ' + str(data.shape))
    T,error = icp(data,template)
    dx = T[0,2]
    dy = T[1,2]
    rotation = numpy.arcsin(T[0,1]) * 360 / 2 / numpy.pi

    print("T",T)
    print("error",error)
    print("rotation°",rotation)
    print("dx",dx)
    print("dy",dy)

    result = cv2.transform(numpy.array([data.T], copy=True).astype(numpy.float32), T).T
    matplotlib.pyplot.plot(template[0], template[1], label="template")
    matplotlib.pyplot.plot(data[0], data[1], label="data")
    matplotlib.pyplot.plot(result[0], result[1], label="result: "+str(rotation)+"° - "+str([dx,dy]))
    matplotlib.pyplot.legend(loc="upper left")
    matplotlib.pyplot.axis('square')
    matplotlib.pyplot.show()
